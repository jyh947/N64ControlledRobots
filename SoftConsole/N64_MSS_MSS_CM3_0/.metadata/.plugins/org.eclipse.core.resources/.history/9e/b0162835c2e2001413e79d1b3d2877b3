#include <stdio.h>
#include <inttypes.h>
#include <stdlib.h>
#include "drivers/mss_uart/mss_uart.h"

typedef struct {
	int A;
	int B;
	int Z;
	int Start;
	int Up;
	int Down;
	int Left;
	int Right;
	int L;
	int R;
	int C_Up;
	int C_Down;
	int C_Left;
	int C_Right;
	int8_t X_Axis;
	int8_t Y_Axis;
	int8_t X_Axis_prev;
	int8_t Y_Axis_prev;
	int input;
	int input_prev;
	int prevX[15];
	float new_X;
	float left_motor;
	float right_motor;
	float max_left;
	float max_right;
	float rateR;
	float rateL;
} controller_data;

static controller_data player_1_data;
static controller_data player_2_data;
void player_1(int input);
void player_2(int input);
uint8_t tx_buff[2];
uint8_t rx_buff[10];

int main()
{
	/* initialize UARTs and transmit buffer */
	MSS_UART_init
	(
		&g_mss_uart1,
		MSS_UART_9600_BAUD,
		MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
	);

	int i;
	for(i = 0; i < 15; ++i){
		player_1_data.prevX[i] = 0;
	}
	player_1_data.new_X = 0;
	player_1_data.left_motor = 0;
	player_1_data.right_motor = 0;
	player_1_data.max_left = 100;
	player_1_data.max_right = 100;
	player_1_data.rateR = 0;
	player_1_data.rateL = 0;
	for(i = 0; i < 15; ++i){
		player_2_data.prevX[i] = 0;
	}
	player_2_data.new_X = 0;
	player_2_data.left_motor = 0;
	player_2_data.right_motor = 0;
	player_2_data.max_left = 100;
	player_2_data.max_right = 100;
	player_2_data.rateR = 0;
	player_2_data.rateL = 0;
	while( 1 )
	{
		int player_1_input = *(int *)(0x40050000);
		int player_2_input = *(int *)(0x40050F00);
		player_1(player_1_input);
		player_2(player_2_input);
		MSS_UART_polled_tx( &g_mss_uart1, tx_buff, sizeof(tx_buff) );
		//MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) );
		//printf("rx_buff[0] %u\r\n", rx_buff[0]);
		//printf("rx_buff[1] %u\r\n", rx_buff[1]);
	}
	return 0;
}
void player_1(int input)
{
	player_1_data.A = input & (1 << 0);
	player_1_data.B = input & (1 << 1);
	player_1_data.Z = input & (1 << 2);
	player_1_data.Start = input & (1 << 3);
	player_1_data.Up = input & (1 << 4);
	player_1_data.Down = input & (1 << 5);
	player_1_data.Left = input & (1 << 6);
	player_1_data.Right = input & (1 << 7);
	player_1_data.L = input & (1 << 10);
	player_1_data.R = input & (1 << 11);
	player_1_data.C_Up = input & (1 << 12);
	player_1_data.C_Down = input & (1 << 13);
	player_1_data.C_Left = input & (1 << 14);
	player_1_data.C_Right = input & (1 << 15);
	if(player_1_data.A != 0 && player_1_data.A != (player_1_data.input_prev & (1 << 0)))
	{
		printf("P1 A is pressed\r\n");
	}
	if(player_1_data.B != 0 && player_1_data.B != (player_1_data.input_prev & (1 << 1)))
	{
		printf("P1 B is pressed\r\n");
	}
	/*if(Z != 0 && Z != (input_prev & (1 << 2)))
	{
		printf("Z is pressed\r\n");
	}
	if(Start != 0 && Start != (input_prev & (1 << 3)))
	{
		printf("Start is pressed\r\n");
	}
	if(Up != 0 && Up != (input_prev & (1 << 4)))
	{
		printf("Up is pressed\r\n");
	}
	if(Down != 0 && Down != (input_prev & (1 << 5)))
	{
		printf("Down is pressed\r\n");
	}
	if(Left != 0 && Left != (input_prev & (1 << 6)))
	{
		printf("Left is pressed\r\n");
	}
	if(Right != 0 && Right != (input_prev & (1 << 7)))
	{
		printf("Right is pressed\r\n");
	}
	if(L != 0 && L != (input_prev & (1 << 10)))
	{
		printf("L is pressed\r\n");
	}
	if(R != 0 && R != (input_prev & (1 << 11)))
	{
		printf("R is pressed\r\n");
	}
	if(C_Up != 0 && C_Up != (input_prev & (1 << 12)))
	{
		//Bugged for some reason
		printf("C_Up is pressed\r\n");
	}
	if(C_Down != 0 && C_Down != (input_prev & (1 << 13)))
	{
		//C_Up might come here for some reason
		printf("C_Down is pressed\r\n");
	}
	if(C_Left != 0 && C_Left != (input_prev & (1 << 14)))
	{
		printf("C_Left is pressed\r\n");
	}
	if(C_Right != 0 && C_Right != (input_prev & (1 << 15)))
	{
		printf("C_Right is pressed\r\n");
	}*/
	player_1_data.X_Axis = 0;
	player_1_data.Y_Axis = 0;
	int iter;
	for(iter = 0; iter < 8; iter++)
	{
		int i = 7 - iter;
		if(input & (1 << (16 + i)))
		{
			player_1_data.X_Axis = player_1_data.X_Axis | (1 << iter);
		}
	}
	//		if((X_Axis > 5 || X_Axis < -5) && X_Axis != X_Axis_prev)
	//{
		//printf("P1 X_Axis is at %i\r\n", player_1_data.X_Axis);
	//}
/*	for(iter = 0; iter < 8; iter++)
	{
		int i = 7 - iter;
		if(input & (1 << (24 + i)))
		{
			player_1_data.Y_Axis = player_1_data.Y_Axis | (1 << iter);
		}
	}*/
	/*		if((Y_Axis > 5 || Y_Axis < -5) && Y_Axis != Y_Axis_prev)
	{
		printf("Y_Axis is at %i\r\n", Y_Axis);
	}*/
	int i = 14;
	for(;i > 0; --i){
		player_1_data.prevX[i] = player_1_data.prevX[(i-1)];
	}
	player_1_data.prevX[0] = player_1_data.X_Axis;
	for(i = 0; i < 15; ++i){
		player_1_data.new_X = player_1_data.new_X + player_1_data.prevX[i];
	}
	player_1_data.new_X = (player_1_data.new_X/15);
	//printf("X/81: %f\r\n", (player_1_data.new_X/81));
	//printf("new_X: %f\r\n", new_X);
	if((player_1_data.new_X/81) > 0.3){
		//printf("Xright: %f\r\n", (new_X/81));
		player_1_data.rateL = ((player_1_data.new_X/81) * 2);
		player_1_data.rateR = ((player_1_data.new_X/81) * 1);
		player_1_data.max_left = 75;
		player_1_data.max_right = 25;
	}
	else if((player_1_data.new_X/81) < -0.3){
		//printf("Xleft: %f\r\n", (new_X/81));
		player_1_data.rateL = -1*((player_1_data.new_X/81) * 1);
		player_1_data.rateR = -1*((player_1_data.new_X/81) * 2);
		player_1_data.max_left = 25;
		player_1_data.max_right = 75;
	}
	else{
		//printf("XZERO: %f\r\n", (new_X/81));
		player_1_data.rateL = 2;
		player_1_data.rateR = 2;
		player_1_data.max_left = 100;
		player_1_data.max_right = 100;
	}
	if(player_1_data.A && !player_1_data.B){
		player_1_data.right_motor = player_1_data.right_motor + player_1_data.rateR;
		player_1_data.left_motor = player_1_data.left_motor + player_1_data.rateL;
		if(player_1_data.right_motor > player_1_data.max_right) player_1_data.right_motor = player_1_data.max_right;
		if(player_1_data.left_motor > player_1_data.max_left) player_1_data.left_motor = player_1_data.max_left;
	}
	else if(!player_1_data.A && player_1_data.B){
		player_1_data.right_motor = player_1_data.right_motor - player_1_data.rateR;
		player_1_data.left_motor = player_1_data.left_motor - player_1_data.rateL;
		if(player_1_data.right_motor < (-1*player_1_data.max_right)) player_1_data.right_motor = (-1*player_1_data.max_right);
		if(player_1_data.left_motor < (-1*player_1_data.max_left)) player_1_data.left_motor = (-1*player_1_data.max_left);
	}
	else if(!player_1_data.A && !player_1_data.B){
		if(player_1_data.left_motor >= 5) player_1_data.left_motor = player_1_data.left_motor - 1;
		else if(player_1_data.left_motor <= -5) player_1_data.left_motor = player_1_data.left_motor + 1;
		if(player_1_data.right_motor >= 5) player_1_data.right_motor = player_1_data.right_motor - 1;
		else if(player_1_data.right_motor <= -5) player_1_data.right_motor = player_1_data.right_motor + 1;
		if(player_1_data.left_motor < 5 && player_1_data.left_motor > -5) player_1_data.left_motor = 0;
		if(player_1_data.right_motor < 5 && player_1_data.right_motor > -5) player_1_data.right_motor = 0;
	}

	tx_buff[0] = (uint8_t) (player_1_data.left_motor + 100);
	tx_buff[1] = (uint8_t) (player_1_data.right_motor + 100);

	//printf("Left Motor is %f\r\n", player_1_data.left_motor);
	printf("tx_buff[0] %u\r\n", tx_buff[0]);
	printf("tx_buff[1] %u\r\n", tx_buff[1]);
	//printf("Right Motor is at %i\r\n", right_motor);
	player_1_data.X_Axis_prev = player_1_data.X_Axis;
	//player_1_data.Y_Axis_prev = player_1_data.Y_Axis;
	player_1_data.X_Axis = 0;
	//player_1_data.Y_Axis = 0;
	player_1_data.input_prev = input;
}

void player_2(int input)
{
	player_2_data.A = input & (1 << 0);
	player_2_data.B = input & (1 << 1);
	player_2_data.Z = input & (1 << 2);
	player_2_data.Start = input & (1 << 3);
	player_2_data.Up = input & (1 << 4);
	player_2_data.Down = input & (1 << 5);
	player_2_data.Left = input & (1 << 6);
	player_2_data.Right = input & (1 << 7);
	player_2_data.L = input & (1 << 10);
	player_2_data.R = input & (1 << 11);
	player_2_data.C_Up = input & (1 << 12);
	player_2_data.C_Down = input & (1 << 13);
	player_2_data.C_Left = input & (1 << 14);
	player_2_data.C_Right = input & (1 << 15);
	if(player_2_data.A != 0 && player_2_data.A != (player_2_data.input_prev & (1 << 0)))
	{
		printf("P2 A is pressed\r\n");
	}
	if(player_2_data.B != 0 && player_2_data.B != (player_2_data.input_prev & (1 << 1)))
	{
		printf("P2 B is pressed\r\n");
	}
	/*if(Z != 0 && Z != (input_prev & (1 << 2)))
	{
		printf("Z is pressed\r\n");
	}
	if(Start != 0 && Start != (input_prev & (1 << 3)))
	{
		printf("Start is pressed\r\n");
	}
	if(Up != 0 && Up != (input_prev & (1 << 4)))
	{
		printf("Up is pressed\r\n");
	}
	if(Down != 0 && Down != (input_prev & (1 << 5)))
	{
		printf("Down is pressed\r\n");
	}
	if(Left != 0 && Left != (input_prev & (1 << 6)))
	{
		printf("Left is pressed\r\n");
	}
	if(Right != 0 && Right != (input_prev & (1 << 7)))
	{
		printf("Right is pressed\r\n");
	}
	if(L != 0 && L != (input_prev & (1 << 10)))
	{
		printf("L is pressed\r\n");
	}
	if(R != 0 && R != (input_prev & (1 << 11)))
	{
		printf("R is pressed\r\n");
	}
	if(C_Up != 0 && C_Up != (input_prev & (1 << 12)))
	{
		//Bugged for some reason
		printf("C_Up is pressed\r\n");
	}
	if(C_Down != 0 && C_Down != (input_prev & (1 << 13)))
	{
		//C_Up might come here for some reason
		printf("C_Down is pressed\r\n");
	}
	if(C_Left != 0 && C_Left != (input_prev & (1 << 14)))
	{
		printf("C_Left is pressed\r\n");
	}
	if(C_Right != 0 && C_Right != (input_prev & (1 << 15)))
	{
		printf("C_Right is pressed\r\n");
	}*/
	player_2_data.X_Axis = 0;
	player_2_data.Y_Axis = 0;
	int iter;
	for(iter = 0; iter < 8; iter++)
	{
		int i = 7 - iter;
		if(input & (1 << (16 + i)))
		{
			player_2_data.X_Axis = player_2_data.X_Axis | (1 << iter);
		}
	}
	if(player_2_data.X_Axis > 100)
	{
		player_2_data.X_Axis = 70;
	}
	//		if((X_Axis > 5 || X_Axis < -5) && X_Axis != X_Axis_prev)
	//{
		//printf("P2 X_Axis is at %i\r\n", player_2_data.X_Axis);
	//}
/*	for(iter = 0; iter < 8; iter++)
	{
		int i = 7 - iter;
		if(input & (1 << (24 + i)))
		{
			player_2_data.Y_Axis = player_2_data.Y_Axis | (1 << iter);
		}
	}*/
	/*		if((Y_Axis > 5 || Y_Axis < -5) && Y_Axis != Y_Axis_prev)
	{
		printf("Y_Axis is at %i\r\n", Y_Axis);
	}*/
	int i = 14;
	for(;i > 0; --i){
		player_2_data.prevX[i] = player_2_data.prevX[(i-1)];
	}
	player_2_data.prevX[0] = player_2_data.X_Axis;
	for(i = 0; i < 15; ++i){
		player_2_data.new_X = player_2_data.new_X + player_2_data.prevX[i];
	}
	player_2_data.new_X = (player_2_data.new_X/15);
	//printf("X/70: %f\r\n", (player_2_data.new_X/70));
	//printf("new_X: %f\r\n", new_X);
	if((player_2_data.new_X/70) > 0.3){
		//printf("Xright: %f\r\n", (new_X/70));
		player_2_data.rateL = ((player_2_data.new_X/70) * 2);
		player_2_data.rateR = ((player_2_data.new_X/70) * 1);
		player_2_data.max_left = 75;
		player_2_data.max_right = 25;
	}
	else if((player_2_data.new_X/70) < -0.3){
		//printf("Xleft: %f\r\n", (new_X/70));
		player_2_data.rateL = -1*((player_2_data.new_X/70) * 1);
		player_2_data.rateR = -1*((player_2_data.new_X/70) * 2);
		player_2_data.max_left = 25;
		player_2_data.max_right = 75;
	}
	else{
		//printf("XZERO: %f\r\n", (new_X/70));
		player_2_data.rateL = 2;
		player_2_data.rateR = 2;
		player_2_data.max_left = 100;
		player_2_data.max_right = 100;
	}
	if(player_2_data.A && !player_2_data.B){
		player_2_data.right_motor = player_2_data.right_motor + player_2_data.rateR;
		player_2_data.left_motor = player_2_data.left_motor + player_2_data.rateL;
		if(player_2_data.right_motor > player_2_data.max_right) player_2_data.right_motor = player_2_data.max_right;
		if(player_2_data.left_motor > player_2_data.max_left) player_2_data.left_motor = player_2_data.max_left;
	}
	else if(!player_2_data.A && player_2_data.B){
		player_2_data.right_motor = player_2_data.right_motor - player_2_data.rateR;
		player_2_data.left_motor = player_2_data.left_motor - player_2_data.rateL;
		if(player_2_data.right_motor < (-1*player_2_data.max_right)) player_2_data.right_motor = (-1*player_2_data.max_right);
		if(player_2_data.left_motor < (-1*player_2_data.max_left)) player_2_data.left_motor = (-1*player_2_data.max_left);
	}
	else if(!player_2_data.A && !player_2_data.B){
		if(player_2_data.left_motor >= 5) player_2_data.left_motor = player_2_data.left_motor - 1;
		else if(player_2_data.left_motor <= -5) player_2_data.left_motor = player_2_data.left_motor + 1;
		if(player_2_data.right_motor >= 5) player_2_data.right_motor = player_2_data.right_motor - 1;
		else if(player_2_data.right_motor <= -5) player_2_data.right_motor = player_2_data.right_motor + 1;
		if(player_2_data.left_motor < 5 && player_2_data.left_motor > -5) player_2_data.left_motor = 0;
		if(player_2_data.right_motor < 5 && player_2_data.right_motor > -5) player_2_data.right_motor = 0;
	}
	//printf("Left Motor is %f\r\n", player_2_data.left_motor);
	//printf("Right Motor is at %i\r\n", right_motor);
	player_2_data.X_Axis_prev = player_2_data.X_Axis;
	//player_2_data.Y_Axis_prev = player_2_data.Y_Axis;
	player_2_data.X_Axis = 0;
	//player_2_data.Y_Axis = 0;
	player_2_data.input_prev = input;
}
